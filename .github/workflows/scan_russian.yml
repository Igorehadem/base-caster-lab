name: Scan Russian Comments
on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * 0"  # –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ –∂–µ–ª–∞–Ω–∏—é

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: pip install PyGithub

      - name: Run scan script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: Igorehadem
        run: |
          python <<'EOF'
          from github import Github, Auth
          import re, os, sys

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API (—É–±–∏—Ä–∞–µ—Ç DeprecationWarning)
          auth = Auth.Token(os.getenv("GITHUB_TOKEN"))
          g = Github(auth=auth)
          user = os.getenv("GITHUB_USER")
          u = g.get_user(user)

          CYRILLIC = re.compile(r'[\u0400-\u04FF]')
          results = []

          repos = list(u.get_repos(type="owner"))
          total = len(repos)
          print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {total}\n")

          for i, repo in enumerate(repos, start=1):
              print(f"[{i}/{total}] üîé {repo.full_name}")
              sys.stdout.flush()

              try:
                  repo.get_contents("")  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
              except Exception as e:
                  print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ {repo.name}: {e}")
                  continue

              def walk(path=""):
                  try:
                      items = repo.get_contents(path)
                  except Exception:
                      return []
                  files = []
                  for it in items:
                      if it.type == "dir":
                          files += walk(it.path)
                      else:
                          files.append(it)
                  return files

              files = walk()
              for f in files:
                  if f.size > 200_000:
                      continue
                  try:
                      txt = f.decoded_content.decode('utf-8', errors='ignore')
                  except Exception:
                      continue
                  if CYRILLIC.search(txt):
                      match = CYRILLIC.search(txt)
                      context = txt[match.start():match.start()+120].replace("\n"," ")
                      results.append({
                          "repo": repo.full_name,
                          "file": f.path,
                          "size": f.size,
                          "snippet": context
                      })

          with open("russian_scan_report.md","w",encoding="utf-8") as fh:
              fh.write("# üá∑üá∫ Russian text scan report\n\n")
              if not results:
                  fh.write("‚úÖ No Cyrillic found.\n")
              else:
                  for r in results:
                      fh.write(f"### [{r['repo']}]({ 'https://github.com/' + r['repo'] })\n")
                      fh.write(f"- `{r['file']}` ({r['size']} bytes)\n")
                      fh.write(f"  ```\n  {r['snippet']}\n  ```\n\n")

          print(f"\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π: {len(results)}")
          EOF

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: russian-scan-report
          path: russian_scan_report.md
